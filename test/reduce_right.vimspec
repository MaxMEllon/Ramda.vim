Describe reduce-right
  Before all
    let s:V = vital#of('vital')
    " ramda
    let s:Ramda = s:V.import('Ramda')
    let g:R = s:Ramda.new()
    " powerassert
    let PowerAssert = s:V.import('Vim.PowerAssert')
    let s:assert = PowerAssert.assert
  End

  It case-is-one-args
    let result = g:R.reduce_right({ memo, a -> memo - a })(100)([1, 2, 3])
    execute s:assert('result is 94')
  End

  It case-is-two-args
    let result = g:R.reduce_right({ memo, a -> memo - a })(100, [3, 3, 3])
    execute s:assert('result is 91')
  End

  It case-is-three-args
    let result = g:R.reduce_right({ memo, a -> memo - a }, 100, [5, 5, 5])
    execute s:assert('result is 85')
  End
End
