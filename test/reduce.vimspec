Describe reduce
  Before all
    let s:V = vital#of('vital')
    " ramda
    let s:Ramda = s:V.import('Ramda')
    let g:R = s:Ramda.new()
    " powerassert
    let PowerAssert = s:V.import('Vim.PowerAssert')
    let s:assert = PowerAssert.assert
  End

  It case-is-one-args
    let result = g:R.reduce({ memo, a -> memo + a })(3)([2, 3, 4])
    execute s:assert('result is 12')

    let Func = g:R.reduce({ memo, a -> memo + a })
    let result = Func(3)([2, 3, 4])
    execute s:assert('result is 12')

    let result = Func(3, [2, 3, 4])
    execute s:assert('result is 12')

    let Reducer = Func(5)
    let result = Reducer([1, 2, 3])
    execute s:assert('result is 11')

    let result = Reducer([1, 1, 1])
    execute s:assert('result is 8')
  End

  It case-is-two-args
    let result = g:R.reduce({ memo, a -> memo + a }, 1)([0, 1, 2])
    execute s:assert('result is 4')

    let result = g:R.reduce({ memo, a -> memo - a }, 1)([0, 1, 2])
    execute s:assert('result is -2')
  End

  It case-is-three-args
    let result = g:R.reduce({ memo, a -> memo + a }, 1, [0, 1, 2])
    execute s:assert('result is 4')

    let result = g:R.reduce({ memo, a -> memo - a }, 1, [0, 1, 2])
    execute s:assert('result is -2')
  End
End

" vim: foldmethod=marker
