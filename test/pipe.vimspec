Describe pipe
  Before all
    let s:V = vital#of('vital')
    " ramda
    let s:Ramda = s:V.import('Ramda')
    let g:R = s:Ramda.new()
    " powerassert
    let PowerAssert = s:V.import('Vim.PowerAssert')
    let s:assert = PowerAssert.assert
  End

  It case-is-one-args
    let Func =
          \g:R.pipe([
          \    { l -> map(l, { k, v -> v + 1 }) },
          \    { l -> filter(l, { k, v -> 2 < v }) }
          \])
    execute s:assert('Func([1, 2, 3]) ==# [3, 4]')
  End

  It case-is-one-args-with-Ramda
    " [[1, 2, 3], [1, 1, 1], [2, 1, 2], [2, 3, 3]]
    "     |> R.map({ _, v -> v
    "         |> R.reduce({ memo, v -> memo + v }, 0)
    "         |> { v -> v / 3 }})
    "     |> R.filter({ _, v -> 2 <= v })
    "     |> { xs -> len(xs) }
    let result =
          \g:R.pipe([
          \    g:R.map({ v -> g:R.pipe([
          \        g:R.reduce({ memo, v -> memo + v }, 0),
          \        { v -> v / 3 }])(v)
          \    }),
          \    g:R.filter({ v -> 2 <= v }),
          \    { xs -> len(xs) }
          \])([[1, 2, 3], [1, 1, 1], [2, 1, 2], [2, 3, 3]])
    execute s:assert('result ==# 2')
  End
End

" vim: foldmethod=marker
